{"ast":null,"code":"import { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\nimport rootReducer from \"./rootReducer\";\nimport rootSaga from \"./rootSaga\";\nimport { createWrapper } from \"next-redux-wrapper\";\nimport thunk from \"redux-thunk\";\nimport reduxSaga from \"redux-saga\";\n\nconst bindMiddleware = middleware => {\n  let nodeenv = \"production\"; //if (process.env.NODE_ENV !== \"production\") {\n\n  if (nodeenv !== \"production\") {\n    const {\n      composeWithDevTools\n    } = require(\"redux-devtools-extension\");\n\n    return composeWithDevTools(applyMiddleware(...middleware));\n  }\n\n  return applyMiddleware(...middleware);\n};\n\nexport const makeStore = context => {\n  const sagaMiddleware = createSagaMiddleware();\n  const store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\n  store.sagaTask = sagaMiddleware.run(rootSaga);\n  return store;\n};\nexport const wrapper = createWrapper(makeStore, {\n  debug: false\n});","map":{"version":3,"sources":["C:/ProyectosProductivos/managebackendmp/backend/src/store/store.js"],"names":["createStore","applyMiddleware","createSagaMiddleware","rootReducer","rootSaga","createWrapper","thunk","reduxSaga","bindMiddleware","middleware","nodeenv","composeWithDevTools","require","makeStore","context","sagaMiddleware","store","sagaTask","run","wrapper","debug"],"mappings":"AAAA,SAAQA,WAAR,EAAqBC,eAArB,QAA2C,OAA3C;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,SAASC,aAAT,QAA8B,oBAA9B;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,MAAMC,cAAc,GAAIC,UAAD,IAAgB;AACnC,MAAIC,OAAO,GAAG,YAAd,CADmC,CAGnC;;AACA,MAAIA,OAAO,KAAK,YAAhB,EAA8B;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAA0BC,OAAO,CAAC,0BAAD,CAAvC;;AACA,WAAOD,mBAAmB,CAACV,eAAe,CAAC,GAAGQ,UAAJ,CAAhB,CAA1B;AACH;;AACD,SAAOR,eAAe,CAAC,GAAGQ,UAAJ,CAAtB;AACH,CATD;;AAWA,OAAO,MAAMI,SAAS,GAAIC,OAAD,IAAa;AAClC,QAAMC,cAAc,GAAGb,oBAAoB,EAA3C;AACA,QAAMc,KAAK,GAAGhB,WAAW,CAACG,WAAD,EAAcK,cAAc,CAAC,CAACO,cAAD,CAAD,CAA5B,CAAzB;AAEAC,EAAAA,KAAK,CAACC,QAAN,GAAiBF,cAAc,CAACG,GAAf,CAAmBd,QAAnB,CAAjB;AACA,SAAOY,KAAP;AACH,CANM;AAQP,OAAO,MAAMG,OAAO,GAAGd,aAAa,CAACQ,SAAD,EAAY;AAAEO,EAAAA,KAAK,EAAE;AAAT,CAAZ,CAA7B","sourcesContent":["import {createStore, applyMiddleware} from \"redux\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport rootReducer from \"./rootReducer\";\r\nimport rootSaga from \"./rootSaga\";\r\nimport { createWrapper } from \"next-redux-wrapper\";\r\nimport thunk from \"redux-thunk\";\r\nimport reduxSaga from \"redux-saga\";\r\n\r\n \r\nconst bindMiddleware = (middleware) => {\r\n    let nodeenv = \"production\";\r\n\r\n    //if (process.env.NODE_ENV !== \"production\") {\r\n    if (nodeenv !== \"production\") {\r\n        const { composeWithDevTools } = require(\"redux-devtools-extension\");\r\n        return composeWithDevTools(applyMiddleware(...middleware));\r\n    }\r\n    return applyMiddleware(...middleware);\r\n};\r\n\r\nexport const makeStore = (context) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    const store = createStore(rootReducer, bindMiddleware([sagaMiddleware]));\r\n\r\n    store.sagaTask = sagaMiddleware.run(rootSaga);\r\n    return store;\r\n};\r\n\r\nexport const wrapper = createWrapper(makeStore, { debug: false });\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}